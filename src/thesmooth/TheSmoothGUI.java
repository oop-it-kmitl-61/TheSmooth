/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package thesmooth;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import static java.awt.event.KeyEvent.*;
import java.awt.event.MouseEvent;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javazoom.jl.decoder.Bitstream;
import javazoom.jl.decoder.Header;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.Player;
import javazoom.jl.player.advanced.AdvancedPlayer;
import javazoom.jl.player.advanced.PlaybackEvent;
import javazoom.jl.player.advanced.PlaybackListener;
import static thesmooth.PausablePlayer.FINISHED;
import static thesmooth.PausablePlayer.NOTSTARTED;

/**
 *
 * @author C_aar
 */
public class TheSmoothGUI extends javax.swing.JFrame {

    private File file;
    ListOfMusic test;
    ArrayList<String> listSong;
    PausablePlayer mp3;
    int count = 0;
    FileInputStream fis;
    DefaultListModel lm;
    int pausedOnFrame = 0, frist = 0;
   
    /**
     * Creates new form TheSmoothGUI
     */
    public TheSmoothGUI() {
        initComponents();
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListOfMusic = new javax.swing.JList<>();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        prevoiusButton = new javax.swing.JButton();
        shuffle = new javax.swing.JButton();
        pause = new javax.swing.JButton();
        songNameLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Smooth");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(java.awt.Color.black);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jListOfMusic.setBackground(new java.awt.Color(0, 0, 0));
        jListOfMusic.setForeground(new java.awt.Color(255, 255, 255));
        jListOfMusic.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "empty" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jListOfMusic);

        playButton.setBackground(new java.awt.Color(0, 0, 0));
        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/music-player-play.png"))); // NOI18N
        playButton.setEnabled(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        stopButton.setBackground(new java.awt.Color(0, 0, 0));
        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/stop.png"))); // NOI18N
        stopButton.setToolTipText("");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        nextButton.setBackground(new java.awt.Color(0, 0, 0));
        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/right-arrow.png"))); // NOI18N
        nextButton.setEnabled(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        prevoiusButton.setBackground(new java.awt.Color(0, 0, 0));
        prevoiusButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/last-track-left-arrow.png"))); // NOI18N
        prevoiusButton.setEnabled(false);
        prevoiusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevoiusButtonActionPerformed(evt);
            }
        });

        shuffle.setBackground(new java.awt.Color(0, 0, 0));
        shuffle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/shuffle.png"))); // NOI18N
        shuffle.setEnabled(false);
        shuffle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleActionPerformed(evt);
            }
        });

        pause.setBackground(new java.awt.Color(0, 0, 0));
        pause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/pause-button.png"))); // NOI18N
        pause.setEnabled(false);
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });

        songNameLabel.setBackground(new java.awt.Color(0, 0, 0));
        songNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        songNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(shuffle)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(playButton)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(pause, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(stopButton)
                                .addGap(27, 27, 27)
                                .addComponent(prevoiusButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                                .addComponent(nextButton)
                                .addGap(12, 12, 12))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(songNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(shuffle, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(songNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(prevoiusButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stopButton)
                        .addComponent(pause)
                        .addComponent(playButton)))
                .addGap(28, 28, 28))
        );

        jMenuBar1.setBackground(java.awt.Color.pink);
        jMenuBar1.setForeground(java.awt.Color.pink);
        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jMenu1.setText("File");

        openMenu.setText("Open");
        openMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        jMenu1.add(openMenu);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        FileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = FileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            test = new ListOfMusic(FileChooser.getSelectedFile().toString());
            System.out.println(FileChooser.getSelectedFile());
            test.ceateListOfMusic();
            AddValuesList();
            playButton.setEnabled(true);
            stopButton.setEnabled(false);
            shuffle.setEnabled(true);
            FileInputStream fis = null;
        }
       
        
    }//GEN-LAST:event_openMenuActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        playButton.setEnabled(false);
        pause.setEnabled(true);
        stopButton.setEnabled(true);
        nextButton.setEnabled(true);
        prevoiusButton.setEnabled(true);
        
         
        if(!jListOfMusic.isSelectionEmpty())
        {
            count = jListOfMusic.getSelectedIndex();
        }
            
       
        if(count < test.getListOfMusic().size())
        {
                playMp3();
                songNameLabel.setText(listSong.get(count));
            
        }
        else
        {
            count = 0;
                playMp3();
                songNameLabel.setText(listSong.get(count));
        }
            
    }//GEN-LAST:event_playButtonActionPerformed
    public void nextSong()
    {
        playButton.setEnabled(false);
        pause.setEnabled(true);
        stopButton.setEnabled(true);
        count++;
    }
    public void pveSong()
    {
        playButton.setEnabled(false);
        pause.setEnabled(true);
        stopButton.setEnabled(true);
        count--;
    }
    public void chcekSong()
    {
        
        new Thread()
        {
            @Override
            public void run()
            {                 
                while(true)
                {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(TheSmoothGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if(mp3.player.isComplete())
                    {
                        System.out.print("eiei");

                            count++;
                            if(count > test.getListOfMusic().size()-1){
                                count = 0;
                            }
                            playMp3();
                            songNameLabel.setText(listSong.get(count));

                        
                         
                    }
                }
                
            }
        }.start();
    }
    private void dispatchKeyEvent(KeyEvent e) {
        if(e.equals(VK_SPACE)){
            playButton.setEnabled(true);
            stopButton.setEnabled(false);
            mp3.close();
        }
    }
    
    public void playMp3()
    {
        try
        {
            if(frist == 0){
                chcekSong();
            }
            if(frist == 0 || mp3.playerStatus == NOTSTARTED || mp3.playerStatus == FINISHED)
            {
                
                FileInputStream fis     = new FileInputStream(test.getPath()+"\\"+listSong.get(count));
                mp3 = new PausablePlayer(fis);
                frist = 1;
            }
        }
        catch (FileNotFoundException | JavaLayerException e)
        {
            System.out.println("Problem playing file " + test.getPath()+"\\"+listSong.get(count));
            System.out.println(e);
        }
        try {
                  mp3.play();
        } catch (JavaLayerException ex) {
            Logger.getLogger(TheSmoothGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
  songNameLabel.setText(listSong.get(count));
        
    }
    
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        playButton.setEnabled(true);
        stopButton.setEnabled(false);
        pausedOnFrame = 0;
        mp3.close();
        
    }//GEN-LAST:event_stopButtonActionPerformed

    private void prevoiusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevoiusButtonActionPerformed
        playButton.setEnabled(false);
        pause.setEnabled(true);
        stopButton.setEnabled(true);
        nextButton.setEnabled(true);
        prevoiusButton.setEnabled(true);
        mp3.close();
        if(count > 0)
        {
            pveSong();
        }
        else
        {
            count = test.getListOfMusic().size()-1;
        }

            playMp3();

    }//GEN-LAST:event_prevoiusButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        playButton.setEnabled(false);
        pause.setEnabled(true);
        stopButton.setEnabled(true);
        nextButton.setEnabled(true);
        prevoiusButton.setEnabled(true);
        mp3.close();
        if(count < test.getListOfMusic().size()-1)
        {
            nextSong();
        }
        else
        {
            count = 0;
        }
        

            playMp3();

    }//GEN-LAST:event_nextButtonActionPerformed

    private void shuffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleActionPerformed
        count = 0;
        AddValuesList();
    }//GEN-LAST:event_shuffleActionPerformed

    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
            playButton.setEnabled(true);
        pause.setEnabled(false);
        stopButton.setEnabled(true);
        
        mp3.pause();
    }//GEN-LAST:event_pauseActionPerformed
    

    public void AddValuesList()
    {
        listSong = new ArrayList<String>(test.getListOfMusic());
        lm = new DefaultListModel();
        for(int i=0;i<listSong.size();i++){
        int swapWith = (int)(Math.random()*(listSong.size()-i))+i;
        if(swapWith==i) continue;
        listSong.add(i, listSong.remove(swapWith));
        listSong.add(swapWith, listSong.remove(i+1));
    }

        for (int i=0; i < listSong.size(); i++)
        {
            lm.add(i, listSong.get(i));
            System.out.println(listSong.get(i)+ " ------> " + listSong.get(i).getClass().getName());
        }
        jListOfMusic.setModel(lm);
    }
    
    public DefaultListModel getsongName(){
        return lm;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TheSmoothGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TheSmoothGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TheSmoothGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TheSmoothGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TheSmoothGUI().setVisible(true);
            }
        });
    }
//    public File getFileThat()
//    {
//        return test;
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JList<String> jListOfMusic;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JButton pause;
    private javax.swing.JButton playButton;
    private javax.swing.JButton prevoiusButton;
    private javax.swing.JButton shuffle;
    private javax.swing.JLabel songNameLabel;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
